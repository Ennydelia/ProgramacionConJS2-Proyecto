{"mappings":"A,S,E,C,E,O,G,E,U,C,E,O,C,C,C,IOoPQ,EAQA,EAkHR,E,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,A,C,E,E,Q,A,E,Q,S,C,C,C,E,O,c,C,E,O,C,W,C,I,I,E,I,A,G,E,E,W,C,E,a,C,C,GN5WA,IAgBA,EAhBI,EAAU,IAAI,IAgBlB,EAfA,SAAkB,CAAO,CAAE,CAAQ,EACjC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAS,MAAM,CAAG,EAAG,GAAK,EAC5C,EAAQ,GAAG,CAAC,CAAQ,CAAC,EAAE,CAAE,CACvB,QAAS,EACT,KAAM,CAAQ,CAAC,EAAI,EAAE,AACvB,EAEJ,C,GCVA,AAAA,EAAA,SAAA,QAAA,CAA8C,IAAA,IAAoB,GAAA,YAAA,GAAA,EAAI,QAAQ,GAAG,KAAK,KAAK,CAAC,iG,I,E,C,EGA5F,EAAiB,IAAA,IAAoB,sCAAA,YAAA,GAAA,EAAuC,QAAQ,GCoEpF,IAAA,EAlEA,MACI,KAAM,AACN,CAAA,cAAe,AAEf,aAAY,CAAa,CAAE,CACvB,IAAI,CAAC,cAAc,CAAG,SAAS,aAAa,CAAC,EACjD,CAEA,OAAO,CAAI,CAAE,CAIT,GAFA,IAAI,CAAC,KAAK,CAAG,EAET,CAAC,GAAS,MAAM,OAAO,CAAC,IAAS,AAAgB,IAAhB,EAAK,MAAM,CAC5C,OAAO,IAAI,CAAC,WAAW,CAAC,sBAI5B,IAAM,EAAS,IAAI,CAAC,eAAe,EACnC,CAAA,IAAI,CAAC,cAAc,CAAC,SAAS,CAAG,CACpC,CAEA,QAAS,CACL,IAAI,CAAC,cAAc,CAAC,SAAS,CAAG,EACpC,CAEA,eAAgB,CACZ,IAAM,EAAS,CAAC;;;+BAGO,EAAE,EAAA,GAAM;;kBAErB,CAAC,AACX,CAAA,IAAI,CAAC,cAAc,CAAC,SAAS,CAAG,GAChC,IAAI,CAAC,cAAc,C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","sources":["<anon>","node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-ad4cd70d6e7f0744.js","src/js/controller.js","src/js/views/RecipeView.js","node_modules/@parcel/runtime-js/lib/runtime-c0b3e88c337260dd.js","src/js/views/View.js","node_modules/fractional/index.js","src/js/views/searchView.js","src/js/views/ResultsView.js","src/js/views/paginationView.js","src/js/model.js","src/js/config.js","src/js/helpers.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire3a11\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire3a11\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"27Lyk\", function(module, exports) {\n\n$parcel$export(module.exports, \"register\", () => $18c11f3350a906ea$export$6503ec6e8aabbaf, (v) => $18c11f3350a906ea$export$6503ec6e8aabbaf = v);\nvar $18c11f3350a906ea$export$6503ec6e8aabbaf;\nvar $18c11f3350a906ea$export$f7ad0328861e2f03;\n\"use strict\";\nvar $18c11f3350a906ea$var$mapping = new Map();\nfunction $18c11f3350a906ea$var$register(baseUrl, manifest) {\n    for(var i = 0; i < manifest.length - 1; i += 2)$18c11f3350a906ea$var$mapping.set(manifest[i], {\n        baseUrl: baseUrl,\n        path: manifest[i + 1]\n    });\n}\nfunction $18c11f3350a906ea$var$resolve(id) {\n    var resolved = $18c11f3350a906ea$var$mapping.get(id);\n    if (resolved == null) throw new Error(\"Could not resolve bundle with id \" + id);\n    return new URL(resolved.path, resolved.baseUrl).toString();\n}\n$18c11f3350a906ea$export$6503ec6e8aabbaf = $18c11f3350a906ea$var$register;\n$18c11f3350a906ea$export$f7ad0328861e2f03 = $18c11f3350a906ea$var$resolve;\n\n});\n\nvar $0483ae18148e4e27$exports = {};\n\n(parcelRequire(\"27Lyk\")).register(new URL(\"\", import.meta.url).toString(), JSON.parse('[\"f9fpV\",\"index.6035c020.js\",\"hfd23\",\"icons.c14567a0.svg\"]'));\n\n/* Importaciones */ var $910d506bc0581171$exports = {};\n$910d506bc0581171$exports = new URL(\"icons.c14567a0.svg\", import.meta.url).toString();\n\n\n\nclass $3a07c34e115c11c9$var$View {\n    _data;\n    _parentElement;\n    constructor(parentElement){\n        this._parentElement = document.querySelector(parentElement);\n    }\n    render(data) {\n        this._data = data;\n        if (!data || Array.isArray(data) && data.length === 0) return this.renderError(\"No data available.\");\n        const markup = this._generateMarkup();\n        this._parentElement.innerHTML = markup;\n    }\n    _clear() {\n        this._parentElement.innerHTML = \"\";\n    }\n    renderSpinner() {\n        const markup = `\r\n            <div class=\"spinner\">\r\n                <svg>\r\n                    <use href=\"${(0, (/*@__PURE__*/$parcel$interopDefault($910d506bc0581171$exports)))}#icon-loader\"></use>\r\n                </svg>\r\n            </div>`;\n        this._parentElement.innerHTML = \"\";\n        this._parentElement.insertAdjacentHTML(\"afterbegin\", markup);\n    }\n    renderError(message = this._errorMessage) {\n        this._clear();\n        const markup = `\r\n            <div class=\"error\">\r\n                <div>\r\n                    <svg>\r\n                        <use href=\"${(0, (/*@__PURE__*/$parcel$interopDefault($910d506bc0581171$exports)))}#icon-alert-triangle\"></use>\r\n                    </svg>\r\n                </div>\r\n                <p>${message}</p>\r\n            </div>`;\n        this._parentElement.insertAdjacentHTML(\"afterbegin\", markup);\n    }\n    renderMessage(message = this._message) {\n        this._clear();\n        const markup = `\r\n            <div class=\"message\">\r\n                <div>\r\n                    <svg>\r\n                        <use href=\"${(0, (/*@__PURE__*/$parcel$interopDefault($910d506bc0581171$exports)))}#icon-smile\"></use>\r\n                    </svg>\r\n                </div>\r\n                <p>${message}</p>\r\n            </div>`;\n        this._parentElement.insertAdjacentHTML(\"afterbegin\", markup);\n    }\n}\nvar $3a07c34e115c11c9$export$2e2bcd8739ae039 = $3a07c34e115c11c9$var$View;\n\n\n/*\r\nfraction.js\r\nA Javascript fraction library.\r\n\r\nCopyright (c) 2009  Erik Garrison <erik@hypervolu.me>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n\r\n*/ /* Fractions */ /* \r\n *\r\n * Fraction objects are comprised of a numerator and a denomenator.  These\r\n * values can be accessed at fraction.numerator and fraction.denomenator.\r\n *\r\n * Fractions are always returned and stored in lowest-form normalized format.\r\n * This is accomplished via Fraction.normalize.\r\n *\r\n * The following mathematical operations on fractions are supported:\r\n *\r\n * Fraction.equals\r\n * Fraction.add\r\n * Fraction.subtract\r\n * Fraction.multiply\r\n * Fraction.divide\r\n *\r\n * These operations accept both numbers and fraction objects.  (Best results\r\n * are guaranteed when the input is a fraction object.)  They all return a new\r\n * Fraction object.\r\n *\r\n * Usage:\r\n *\r\n * TODO\r\n *\r\n */ /*\r\n * The Fraction constructor takes one of:\r\n *   an explicit numerator (integer) and denominator (integer),\r\n *   a string representation of the fraction (string),\r\n *   or a floating-point number (float)\r\n *\r\n * These initialization methods are provided for convenience.  Because of\r\n * rounding issues the best results will be given when the fraction is\r\n * constructed from an explicit integer numerator and denomenator, and not a\r\n * decimal number.\r\n *\r\n *\r\n * e.g. new Fraction(1, 2) --> 1/2\r\n *      new Fraction('1/2') --> 1/2\r\n *      new Fraction('2 3/4') --> 11/4  (prints as 2 3/4)\r\n *\r\n */ var $d6b4c6d58e0c0c19$export$b336c2702c498be5;\nFraction = function(numerator, denominator) {\n    /* double argument invocation */ if (typeof numerator !== \"undefined\" && denominator) {\n        if (typeof numerator === \"number\" && typeof denominator === \"number\") {\n            this.numerator = numerator;\n            this.denominator = denominator;\n        } else if (typeof numerator === \"string\" && typeof denominator === \"string\") {\n            // what are they?\n            // hmm....\n            // assume they are ints?\n            this.numerator = parseInt(numerator);\n            this.denominator = parseInt(denominator);\n        }\n    /* single-argument invocation */ } else if (typeof denominator === \"undefined\") {\n        num = numerator; // swap variable names for legibility\n        if (typeof num === \"number\") {\n            this.numerator = num;\n            this.denominator = 1;\n        } else if (typeof num === \"string\") {\n            var a, b; // hold the first and second part of the fraction, e.g. a = '1' and b = '2/3' in 1 2/3\n            // or a = '2/3' and b = undefined if we are just passed a single-part number\n            var arr = num.split(\" \");\n            if (arr[0]) a = arr[0];\n            if (arr[1]) b = arr[1];\n            /* compound fraction e.g. 'A B/C' */ //  if a is an integer ...\n            if (a % 1 === 0 && b && b.match(\"/\")) return new Fraction(a).add(new Fraction(b));\n            else if (a && !b) {\n                /* simple fraction e.g. 'A/B' */ if (typeof a === \"string\" && a.match(\"/\")) {\n                    // it's not a whole number... it's actually a fraction without a whole part written\n                    var f = a.split(\"/\");\n                    this.numerator = f[0];\n                    this.denominator = f[1];\n                /* string floating point */ } else if (typeof a === \"string\" && a.match(\".\")) return new Fraction(parseFloat(a));\n                else {\n                    this.numerator = parseInt(a);\n                    this.denominator = 1;\n                }\n            } else return undefined; // could not parse\n        }\n    }\n    this.normalize();\n};\nFraction.prototype.clone = function() {\n    return new Fraction(this.numerator, this.denominator);\n};\n/* pretty-printer, converts fractions into whole numbers and fractions */ Fraction.prototype.toString = function() {\n    if (this.denominator === \"NaN\") return \"NaN\";\n    var wholepart = this.numerator / this.denominator > 0 ? Math.floor(this.numerator / this.denominator) : Math.ceil(this.numerator / this.denominator);\n    var numerator = this.numerator % this.denominator;\n    var denominator = this.denominator;\n    var result = [];\n    if (wholepart != 0) result.push(wholepart);\n    if (numerator != 0) result.push((wholepart === 0 ? numerator : Math.abs(numerator)) + \"/\" + denominator);\n    return result.length > 0 ? result.join(\" \") : 0;\n};\n/* destructively rescale the fraction by some integral factor */ Fraction.prototype.rescale = function(factor) {\n    this.numerator *= factor;\n    this.denominator *= factor;\n    return this;\n};\nFraction.prototype.add = function(b) {\n    var a = this.clone();\n    if (b instanceof Fraction) b = b.clone();\n    else b = new Fraction(b);\n    td = a.denominator;\n    a.rescale(b.denominator);\n    b.rescale(td);\n    a.numerator += b.numerator;\n    return a.normalize();\n};\nFraction.prototype.subtract = function(b) {\n    var a = this.clone();\n    if (b instanceof Fraction) b = b.clone(); // we scale our argument destructively, so clone\n    else b = new Fraction(b);\n    td = a.denominator;\n    a.rescale(b.denominator);\n    b.rescale(td);\n    a.numerator -= b.numerator;\n    return a.normalize();\n};\nFraction.prototype.multiply = function(b) {\n    var a = this.clone();\n    if (b instanceof Fraction) {\n        a.numerator *= b.numerator;\n        a.denominator *= b.denominator;\n    } else if (typeof b === \"number\") a.numerator *= b;\n    else return a.multiply(new Fraction(b));\n    return a.normalize();\n};\nFraction.prototype.divide = function(b) {\n    var a = this.clone();\n    if (b instanceof Fraction) {\n        a.numerator *= b.denominator;\n        a.denominator *= b.numerator;\n    } else if (typeof b === \"number\") a.denominator *= b;\n    else return a.divide(new Fraction(b));\n    return a.normalize();\n};\nFraction.prototype.equals = function(b) {\n    if (!(b instanceof Fraction)) b = new Fraction(b);\n    // fractions that are equal should have equal normalized forms\n    var a = this.clone().normalize();\n    var b = b.clone().normalize();\n    return a.numerator === b.numerator && a.denominator === b.denominator;\n};\n/* Utility functions */ /* Destructively normalize the fraction to its smallest representation. \r\n * e.g. 4/16 -> 1/4, 14/28 -> 1/2, etc.\r\n * This is called after all math ops.\r\n */ Fraction.prototype.normalize = function() {\n    var isFloat = function(n) {\n        return typeof n === \"number\" && (n > 0 && n % 1 > 0 && n % 1 < 1 || n < 0 && n % -1 < 0 && n % -1 > -1);\n    };\n    var roundToPlaces = function(n, places) {\n        if (!places) return Math.round(n);\n        else {\n            var scalar = Math.pow(10, places);\n            return Math.round(n * scalar) / scalar;\n        }\n    };\n    return function() {\n        // XXX hackish.  Is there a better way to address this issue?\n        //\n        /* first check if we have decimals, and if we do eliminate them\r\n         * multiply by the 10 ^ number of decimal places in the number\r\n         * round the number to nine decimal places\r\n         * to avoid js floating point funnies\r\n         */ if (isFloat(this.denominator)) {\n            var rounded = roundToPlaces(this.denominator, 9);\n            var scaleup = Math.pow(10, rounded.toString().split(\".\")[1].length);\n            this.denominator = Math.round(this.denominator * scaleup); // this !!! should be a whole number\n            //this.numerator *= scaleup;\n            this.numerator *= scaleup;\n        }\n        if (isFloat(this.numerator)) {\n            var rounded = roundToPlaces(this.numerator, 9);\n            var scaleup = Math.pow(10, rounded.toString().split(\".\")[1].length);\n            this.numerator = Math.round(this.numerator * scaleup); // this !!! should be a whole number\n            //this.numerator *= scaleup;\n            this.denominator *= scaleup;\n        }\n        var gcf = Fraction.gcf(this.numerator, this.denominator);\n        this.numerator /= gcf;\n        this.denominator /= gcf;\n        if (this.numerator < 0 && this.denominator < 0 || this.numerator > 0 && this.denominator < 0) {\n            this.numerator *= -1;\n            this.denominator *= -1;\n        }\n        return this;\n    };\n}();\n/* Takes two numbers and returns their greatest common factor.\r\n */ Fraction.gcf = function(a, b) {\n    var common_factors = [];\n    var fa = Fraction.primeFactors(a);\n    var fb = Fraction.primeFactors(b);\n    // for each factor in fa\n    // if it's also in fb\n    // put it into the common factors\n    fa.forEach(function(factor) {\n        var i = fb.indexOf(factor);\n        if (i >= 0) {\n            common_factors.push(factor);\n            fb.splice(i, 1); // remove from fb\n        }\n    });\n    if (common_factors.length === 0) return 1;\n    var gcf = function() {\n        var r = common_factors[0];\n        var i;\n        for(i = 1; i < common_factors.length; i++)r = r * common_factors[i];\n        return r;\n    }();\n    return gcf;\n};\n// Adapted from: \n// http://www.btinternet.com/~se16/js/factor.htm\nFraction.primeFactors = function(n) {\n    var num1 = Math.abs(n);\n    var factors = [];\n    var _factor = 2; // first potential prime factor\n    while(_factor * _factor <= num1)if (num1 % _factor === 0) {\n        factors.push(_factor); // so keep it\n        num1 = num1 / _factor; // and divide our search point by it\n    } else _factor++; // and increment\n    if (num1 != 1) factors.push(num1); //    so it too should be recorded\n    return factors; // Return the prime factors\n};\n$d6b4c6d58e0c0c19$export$b336c2702c498be5 = Fraction;\n\n\nclass $e95330fac959b1b1$var$RecipeView extends (0, $3a07c34e115c11c9$export$2e2bcd8739ae039) {\n    _parentElement;\n    _data;\n    _errorMessage = \"We could not find that recipe. Please try another one!\";\n    _successMessage = \"Recipe successfully loaded!\";\n    constructor(parentElement){\n        super(parentElement);\n        this._parentElement = document.querySelector(parentElement);\n    }\n    render(data) {\n        this._data = data;\n        const markup = this._generateMarkup();\n        this._parentElement.innerHTML = markup;\n    }\n    addHandlerRender(handler) {\n        [\n            \"hashchange\",\n            \"load\"\n        ].forEach((ev)=>window.addEventListener(ev, (event)=>handler(event)));\n    }\n    /* Se copia el HTML que tenemos en Controller JS, ya que es nuestra parte de la vista */ /* Debido al siguiente error: Cannot read properties of undefined (reading 'map') se genera una validacion del MAP */ _generateMarkup() {\n        return `<figure class=\"recipe__fig\">\r\n        <img src=\"${this._data.image_url}\" alt=\"Tomato\" class=\"recipe__img\" />\r\n        <h1 class=\"recipe__title\">\r\n          <span>${this._data.title}</span>\r\n        </h1>\r\n      </figure>\r\n\r\n      <div class=\"recipe__details\">\r\n        <div class=\"recipe__info\">\r\n          <svg class=\"recipe__info-icon\">\r\n            <use href=\"../img/icons.svg#icon-clock\"></use>\r\n          </svg>\r\n          <span class=\"recipe__info-data recipe__info-data--minutes\">${this._data.cooking_time}</span>\r\n          <span class=\"recipe__info-text\">minutes</span>\r\n        </div>\r\n        <div class=\"recipe__info\">\r\n          <svg class=\"recipe__info-icon\">\r\n            <use href=\"${0, (/*@__PURE__*/$parcel$interopDefault($910d506bc0581171$exports))}#icon-users\"></use>\r\n          </svg>\r\n          <span class=\"recipe__info-data recipe__info-data--people\">${this._data.servings}</span>\r\n          <span class=\"recipe__info-text\">servings</span>\r\n\r\n          <div class=\"recipe__info-buttons\">\r\n            <button class=\"btn--tiny btn--increase-servings\">\r\n              <svg>\r\n              <use href=\"${0, (/*@__PURE__*/$parcel$interopDefault($910d506bc0581171$exports))}#icon-minus-circle\"></use>\r\n              </svg>\r\n            </button>\r\n            <button class=\"btn--tiny btn--increase-servings\">\r\n              <svg>\r\n              <use href=\"${0, (/*@__PURE__*/$parcel$interopDefault($910d506bc0581171$exports))}#icon-plus-circle\"></use>\r\n              </svg>\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"recipe__user-generated\">\r\n          <svg>\r\n            <use href=\"${0, (/*@__PURE__*/$parcel$interopDefault($910d506bc0581171$exports))}#icon-user\"></use>\r\n          </svg>\r\n        </div>\r\n        <button class=\"btn--round\">\r\n          <svg class=\"\">\r\n            <use href=\"${0, (/*@__PURE__*/$parcel$interopDefault($910d506bc0581171$exports))}#icon-bookmark-fill\"></use>\r\n          </svg>\r\n        </button>\r\n      </div>\r\n      <div class=\"recipe__ingredients\">\r\n        <h2 class=\"heading--2\">Recipe ingredients</h2>\r\n        <ul class=\"recipe__ingredient-list\">\r\n        ${this._data.ingredients ? this._data.ingredients.map((ing)=>{\n            /* Se agrega la funcion para obtener la fraccion de la cantidad */ const quantity = ing.quantity ? new (0, $d6b4c6d58e0c0c19$export$b336c2702c498be5)(ing.quantity).toString() : \"\";\n            return `\r\n          <li class=\"recipe__ingredient\">\r\n            <svg class=\"recipe__icon\">\r\n              <use href=\"${0, (/*@__PURE__*/$parcel$interopDefault($910d506bc0581171$exports))}icon-check\"></use>\r\n            </svg>\r\n            <div class=\"recipe__quantity\">${quantity}</div>\r\n            <div class=\"recipe__description\">\r\n              <span class=\"recipe__unit\">${ing.unit}</span>\r\n              ${ing.description}\r\n            </div>\r\n          </li>\r\n          `;\n        }).join(\"\") : \"\"}      \r\n        </ul>\r\n      </div>\r\n      <div class=\"recipe__directions\">\r\n        <h2 class=\"heading--2\">How to cook it</h2>\r\n        <p class=\"recipe__directions-text\">\r\n          This recipe was carefully designed and tested by\r\n          <span class=\"recipe__publisher\">${this._data.publisher}</span>. Please check out\r\n          directions at their website.\r\n        </p>\r\n        <a class=\"btn--small recipe__btn\" href=\"${this._data.source_url}\" target=\"_blank\">\r\n          <span>Directions</span>\r\n          <svg class=\"search__icon\">\r\n            <use href=\"${0, (/*@__PURE__*/$parcel$interopDefault($910d506bc0581171$exports))}#icon-arrow-right\"></use>\r\n          </svg>\r\n        </a>\r\n      </div>`;\n    }\n    _clear() {\n        this._parentElement.innerHTML = \"\";\n    }\n    renderSpinner() {\n        const markup = `\r\n        <div class=\"spinner\">\r\n          <svg>\r\n            <use href=\"${(0, (/*@__PURE__*/$parcel$interopDefault($910d506bc0581171$exports)))}#icon-loader\"></use>\r\n          </svg>\r\n        </div>\r\n      `;\n        this._parentElement.innerHTML = \"\";\n        this._parentElement.insertAdjacentHTML(\"afterbegin\", markup);\n    }\n    renderError(message = this._errorMessage) {\n        this._clear();\n        const markup = `\r\n        <div class=\"error\">\r\n          <div>\r\n            <svg>\r\n              <use href=\"${(0, (/*@__PURE__*/$parcel$interopDefault($910d506bc0581171$exports)))}#icon-alert-triangle\"></use>\r\n            </svg>\r\n          </div>\r\n          <p>${message}</p>\r\n        </div>\r\n      `;\n        this._parentElement.insertAdjacentHTML(\"afterbegin\", markup);\n    }\n    renderMessage(message = this._message) {\n        this._clear();\n        const markup = `\r\n        <div class=\"message\">\r\n          <div>\r\n            <svg>\r\n              <use href=\"${(0, (/*@__PURE__*/$parcel$interopDefault($910d506bc0581171$exports)))}#icon-smile\"></use>\r\n            </svg>\r\n          </div>\r\n          <p>${message}</p>\r\n        </div>\r\n      `;\n        this._parentElement.insertAdjacentHTML(\"afterbegin\", markup);\n    }\n}\nvar /* Exportacion de la clase RecipeView */ $e95330fac959b1b1$export$2e2bcd8739ae039 = new $e95330fac959b1b1$var$RecipeView(\".recipe\");\n\n\nclass $813cf99795e9ec97$var$SearchView {\n    _parentEl;\n    constructor(parentEl){\n        this._parentEl = document.querySelector(\".search\");\n        this._parentEl.addEventListener(\"click\", this._handleClick.bind(this));\n    }\n    _clearInput() {\n        this._parentEl.querySelector(\".search__field\").value = \"\";\n    }\n    getQuery() {\n        const query = this._parentEl.querySelector(\".search__field\").value;\n        this._clearInput();\n        return query;\n    }\n    _handleClick(event) {\n    // console.log('Click en el elemento de búsqueda:', event.target);\n    }\n    addHandlerSearch(handler) {\n        this._parentEl.addEventListener(\"submit\", function(e) {\n            e.preventDefault();\n            handler();\n        });\n    }\n}\nvar $813cf99795e9ec97$export$2e2bcd8739ae039 = new $813cf99795e9ec97$var$SearchView();\n\n\n\n\nclass $46392c2e8d6932d9$var$ResultsView extends (0, $3a07c34e115c11c9$export$2e2bcd8739ae039) {\n    _parentElement = document.querySelector(\".results\");\n    _errorMessage = \"No recipes found for your query\";\n    _message = \"\";\n    constructor(){\n        super(\".results\");\n    }\n    _generateMarkup() {\n        return this._data.map(this._generateMarkupPreview).join(\"\");\n    }\n    _generateMarkupPreview(result) {\n        return `\r\n        <li class=\"preview\">\r\n            <a class=\"preview__link\" href=\"#${result.id}\">\r\n            <figure class=\"preview__fig\">\r\n                <img src=\"${result.image}\" alt=\"${result.title}\" />\r\n            </figure>\r\n            <div class=\"preview__data\">\r\n                <h4 class=\"preview__title\">${result.title}</h4>\r\n                <p class=\"preview__publisher\">${result.publisher}</p>\r\n                <div class=\"preview__user-generated\">\r\n                <svg>\r\n                    <use href=\"${0, (/*@__PURE__*/$parcel$interopDefault($910d506bc0581171$exports))}#icon-user\"></use>\r\n                </svg>\r\n                </div>\r\n            </div>\r\n            </a>\r\n        </li>`;\n    }\n}\nvar $46392c2e8d6932d9$export$2e2bcd8739ae039 = new $46392c2e8d6932d9$var$ResultsView();\n\n\n\n\nclass $cfa940594ee109f7$var$PaginationView extends (0, $3a07c34e115c11c9$export$2e2bcd8739ae039) {\n    _parentElement = document.querySelector(\".pagination\");\n    addHandlerClick(handler) {\n        this._parentElement.addEventListener(\"click\", function(e) {\n            const btn = e.target.closest(\".btn--inline\");\n            if (!btn) return;\n            const goToPage = +btn.dataset.goto;\n            handler(goToPage);\n        });\n    }\n    _generateMarkup() {\n        if (!this._parentElement) return \"\";\n        const currentPage = this._data.page;\n        const numPages = Math.ceil(this._data.results.length / this._data.resultsPerPage);\n        // Cuando esta en la pagina uno y la consulta tiene mas paginas\n        if (currentPage === 1 && numPages > 1) return `\r\n            <button data-goto=\"${currentPage + 1}\" class=\"btn--inline pagination__btn--next\">\r\n            <span>Page ${currentPage + 1}</span>\r\n            <svg class=\"search__icon\">\r\n                <use href=\"${0, (/*@__PURE__*/$parcel$interopDefault($910d506bc0581171$exports))}#icon-arrow-right\"></use>\r\n            </svg>\r\n            </button>`;\n        // Cuando esta en la ultima pagina\n        if (currentPage === numPages && numPages > 1) return `\r\n            <button data-goto=\"${currentPage - 1}\" class=\"btn--inline pagination__btn--prev\">\r\n                <svg class=\"search__icon\">\r\n                    <use href=\"${0, (/*@__PURE__*/$parcel$interopDefault($910d506bc0581171$exports))}#icon-arrow-left\"></use>\r\n                </svg>\r\n                <span>Page ${currentPage - 1}</span>\r\n            </button>`;\n        // Paginas intermedias\n        if (currentPage < numPages) return `\r\n            <button data-goto=\"${currentPage - 1}\" class=\"btn--inline pagination__btn--prev\">\r\n                <svg class=\"search__icon\">\r\n                    <use href=\"${0, (/*@__PURE__*/$parcel$interopDefault($910d506bc0581171$exports))}#icon-arrow-left\"></use>\r\n                </svg>\r\n                <span>Page ${currentPage - 1}</span>\r\n            </button>\r\n            <button data-goto=\"${currentPage + 1}\" class=\"btn--inline pagination__btn--next\">\r\n                <span>Page ${currentPage + 1}</span>\r\n                <svg class=\"search__icon\">\r\n                    <use href=\"${0, (/*@__PURE__*/$parcel$interopDefault($910d506bc0581171$exports))}#icon-arrow-right\"></use>\r\n                </svg>\r\n            </button>`;\n        // No existe mas de una pagina\n        return \"\";\n    }\n}\nvar $cfa940594ee109f7$export$2e2bcd8739ae039 = new $cfa940594ee109f7$var$PaginationView();\n\n\n/* Importacion de la URL */ /* Se exporta la URL de las recetas y del timeout */ const $ba30e20475feac5a$export$923ea8233b386e99 = \"https://forkify-api.herokuapp.com/api/v2/recipes/\";\nconst $ba30e20475feac5a$export$196440f71ed9f601 = 5;\nconst $ba30e20475feac5a$export$5feaddb1377b7f5e = 10;\n\n\n\nconst $bd02c871d9c5ba8e$var$timeout = function(s) {\n    return new Promise(function(_, reject) {\n        setTimeout(function() {\n            reject(new Error(`Request took too long! Timeout after ${s} second`));\n        }, s * 1000);\n    });\n};\nconst $bd02c871d9c5ba8e$export$d047a7c56db64af4 = async (url)=>{\n    try {\n        // const res = await fetch(url);\n        const fetchPro = fetch(url);\n        const res = await Promise.race([\n            fetchPro,\n            $bd02c871d9c5ba8e$var$timeout((0, $ba30e20475feac5a$export$196440f71ed9f601))\n        ]);\n        const data = await res.json();\n        if (!res.ok) throw new Error(\"Error al obtener los datos\");\n        return data;\n    } catch (error) {\n        throw error;\n    }\n};\n\n\nconst $0f1d4402dffacf5b$export$ca000e230c0caa3e = {\n    recipe: {},\n    search: {\n        query: \"\",\n        results: [],\n        page: 1,\n        resultsPerPage: (0, $ba30e20475feac5a$export$5feaddb1377b7f5e)\n    }\n};\n// Función asíncrona loadRecipe para obtener la receta de la API\nconst $0f1d4402dffacf5b$export$b96725c7a035d60b = async (id)=>{\n    try {\n        /* Declaracion del res */ /* const res = await fetch(`https://forkify-api.herokuapp.com/api/v2/recipes/${id}`);\r\n      const data = await res.json(); */ const url = `${(0, $ba30e20475feac5a$export$923ea8233b386e99)}/${id}`;\n        // const data = await res.json();\n        const data = await (0, $bd02c871d9c5ba8e$export$d047a7c56db64af4)(url);\n        // Validar el estado de la url\n        /* if (!res.ok) {\r\n        throw new Error('Error al obtener la receta');\r\n      } */ // Destructuracion de la informacion\n        const { recipe: recipe } = data.data;\n        // console.log('Recipe:', recipe);\n        $0f1d4402dffacf5b$export$ca000e230c0caa3e.recipe = recipe;\n    // console.log('State:', state);\n    } catch (err) {\n        // Enviar Error\n        // console.log(`${err.message} 💥💥💥💥`);\n        throw err;\n    }\n};\n// Funcion en la cual realiza la busqueda con el query obtenido de config.js\nconst $0f1d4402dffacf5b$export$202b8e5cb363a0c4 = async (query)=>{\n    try {\n        const url = `${(0, $ba30e20475feac5a$export$923ea8233b386e99)}/?search=${query}`;\n        const data = await (0, $bd02c871d9c5ba8e$export$d047a7c56db64af4)(url);\n        $0f1d4402dffacf5b$export$ca000e230c0caa3e.search.query = query;\n        $0f1d4402dffacf5b$export$ca000e230c0caa3e.search.results = data.data.recipes.map((rec)=>({\n                // const recipes = data.data.recipes.map((rec) => ({\n                id: rec.id,\n                title: rec.title,\n                publisher: rec.publisher,\n                image: rec.image_url\n            }));\n        return $0f1d4402dffacf5b$export$ca000e230c0caa3e.search.results;\n    } catch (err) {\n        throw err;\n    }\n};\nconst $0f1d4402dffacf5b$export$8d7f79465139ab72 = (page = $0f1d4402dffacf5b$export$ca000e230c0caa3e.search.page)=>{\n    $0f1d4402dffacf5b$export$ca000e230c0caa3e.search.page = page;\n    // variables de inicio y fin de la paginas \n    const start = (page - 1) * $0f1d4402dffacf5b$export$ca000e230c0caa3e.search.resultsPerPage;\n    const end = page * $0f1d4402dffacf5b$export$ca000e230c0caa3e.search.resultsPerPage;\n    return $0f1d4402dffacf5b$export$ca000e230c0caa3e.search.results.slice(start, end);\n};\n\n\nasync function $f50bd1f2915ed0f2$var$controlRecipes() {\n    try {\n        // Declaracion de variable id\n        const id = window.location.hash.slice(1);\n        // Crear una condicional, para validar si existe el ID\n        if (!id) return;\n        // Funcion para mostrar una imagen de que esta cargando la informacion\n        (0, $e95330fac959b1b1$export$2e2bcd8739ae039).renderSpinner();\n        await $0f1d4402dffacf5b$export$b96725c7a035d60b(id);\n        /* Se hace el cambio por la vista */ (0, $e95330fac959b1b1$export$2e2bcd8739ae039).render($0f1d4402dffacf5b$export$ca000e230c0caa3e.recipe);\n    } catch (error) {\n        (0, $e95330fac959b1b1$export$2e2bcd8739ae039).renderError(error.message);\n    }\n}\nasync function $f50bd1f2915ed0f2$var$controlSearchResults() {\n    try {\n        // Se realiza la busqueda de lo ingresado en el portal, para obtener los resultados del mismo\n        const searchQuery = (0, $813cf99795e9ec97$export$2e2bcd8739ae039).getQuery();\n        if (!searchQuery) return;\n        (0, $46392c2e8d6932d9$export$2e2bcd8739ae039).renderSpinner();\n        await $0f1d4402dffacf5b$export$202b8e5cb363a0c4(searchQuery);\n        // Invoca el método render dentro del model\n        (0, $46392c2e8d6932d9$export$2e2bcd8739ae039).render($0f1d4402dffacf5b$export$8d7f79465139ab72());\n        (0, $cfa940594ee109f7$export$2e2bcd8739ae039).render($0f1d4402dffacf5b$export$ca000e230c0caa3e.search);\n    } catch (err) {\n        console.log(err);\n    }\n}\n// Cree una nueva funcion aincronica, para obtener la pagina de manera actualizada y que la cambie en el portal\nasync function $f50bd1f2915ed0f2$var$controlPagination(goToPage) {\n    try {\n        $0f1d4402dffacf5b$export$8d7f79465139ab72(goToPage);\n        (0, $46392c2e8d6932d9$export$2e2bcd8739ae039).render($0f1d4402dffacf5b$export$8d7f79465139ab72());\n        (0, $cfa940594ee109f7$export$2e2bcd8739ae039).render($0f1d4402dffacf5b$export$ca000e230c0caa3e.search);\n    } catch (err) {\n        console.error(err);\n    }\n}\nfunction $f50bd1f2915ed0f2$var$init() {\n    (0, $e95330fac959b1b1$export$2e2bcd8739ae039).addHandlerRender($f50bd1f2915ed0f2$var$controlRecipes);\n    (0, $813cf99795e9ec97$export$2e2bcd8739ae039).addHandlerSearch($f50bd1f2915ed0f2$var$controlSearchResults);\n    (0, $cfa940594ee109f7$export$2e2bcd8739ae039).addHandlerClick($f50bd1f2915ed0f2$var$controlPagination);\n}\n// Se pasan las instancias de la funcion Init \n$f50bd1f2915ed0f2$var$init(); /* AVANCE 2 */  /* /* Importaciones \r\nimport recipeView from './views/RecipeView';\r\nimport * as model from './model';\r\n\r\n// const recipeContainer = document.querySelector('.recipe');\r\n\r\n/* Se elimina el timeout para pasarlo a helpers */  /* const timeout = function (s) {\r\n  return new Promise(function (_, reject) {\r\n    setTimeout(function () {\r\n      reject(new Error(`Request took too long! Timeout after ${s} second`));\r\n    }, s * 1000);\r\n  });\r\n}; */  // Se elimina el renderspinner del controller.js y se pasa al recipeview\n /* function renderSpinner(parentEl) {\r\n  const markup = `\r\n  <div class=\"spinner\">\r\n    <svg>\r\n      <use href=\"${icons}#icon-loader\"></use>\r\n    </svg>\r\n  </div>`;\r\n  parentEl.innerHTML = '';\r\n  parentEl.insertAdjacentHTML('afterbegin', markup);\r\n} \r\n\r\nasync function controlRecipes(){\r\n  try{\r\n     // Declara una variable id y asígnale el método window.location.hash\r\n    const id = window.location.hash.slice(1);\r\n\r\n    // Imprime en la consola el resultado\r\n    // console.log('ID de la receta:', id);\r\n\r\n    // Antes de obtener, muestra la imagen de cargando\r\n    recipeView.renderSpinner();\r\n\r\n    /* // Obtiene la informacion de una receta con sus ingredientes a traves de un Array\r\n    // const resp = await fetch('https://forkify-api.herokuapp.com/api/v2/recipes/5ed6604591c37cdc054bc886');\r\n    // Modificacion de la URL de manera que obtenga el ID que se toma del index.html\r\n    const resp = await fetch(`https://forkify-api.herokuapp.com/api/v2/recipes/${id}`);\r\n\r\n    // Mensaje de Error en caso de que la pagina sea igual a falso\r\n    if (!resp.ok) {\r\n      throw new Error('Error al obtener la receta');\r\n    } \r\n\r\n    await model.loadRecipe(id);\r\n    //const { recipe } = model.state;\r\n\r\n    /* Se hace el cambio por la vista \r\n    recipeView.render(model.state.recipe);\r\n\r\n    /* const data = await resp.json();\r\n    const recipeData = data.data.recipe;\r\n\r\n    \r\n    // Valida que obtenga informacion para crear la constante para los datos de la receta\r\n    if (data.data) {\r\n      const { id, title, publisher, source_url, image_url, servings, cooking_time, ingredients } = recipeData;\r\n\r\n      const recipe = {\r\n        id,\r\n        title,\r\n        publisher,\r\n        sourceUrl: source_url,  \r\n        image: image_url,\r\n        servings,\r\n        cookTime: cooking_time,\r\n        ingredients,\r\n      }; */  // Parte HTML, donde muestra los datos de la receta y a su vez hace los cambios directos en el HTML\n /* Debido al siguiente error: Cannot read properties of undefined (reading 'map') se genera una validacion del MAP */  /* Se desactiva la parte HTML, ya que se encuentra en el RecipeView */  /* const markup = ` <figure class=\"recipe__fig\">\r\n        <img src=\"${recipe.image_url}\" alt=\"Tomato\" class=\"recipe__img\" />\r\n        <h1 class=\"recipe__title\">\r\n          <span>${recipe.title}</span>\r\n        </h1>\r\n      </figure>\r\n\r\n      <div class=\"recipe__details\">\r\n        <div class=\"recipe__info\">\r\n          <svg class=\"recipe__info-icon\">\r\n            <use href=\"../img/icons.svg#icon-clock\"></use>\r\n          </svg>\r\n          <span class=\"recipe__info-data recipe__info-data--minutes\">${recipe.cooking_time}</span>\r\n          <span class=\"recipe__info-text\">minutes</span>\r\n        </div>\r\n        <div class=\"recipe__info\">\r\n          <svg class=\"recipe__info-icon\">\r\n            <use href=\"${icons}#icon-users\"></use>\r\n          </svg>\r\n          <span class=\"recipe__info-data recipe__info-data--people\">${recipe.servings}</span>\r\n          <span class=\"recipe__info-text\">servings</span>\r\n\r\n          <div class=\"recipe__info-buttons\">\r\n            <button class=\"btn--tiny btn--increase-servings\">\r\n              <svg>\r\n              <use href=\"${icons}#icon-minus-circle\"></use>\r\n              </svg>\r\n            </button>\r\n            <button class=\"btn--tiny btn--increase-servings\">\r\n              <svg>\r\n              <use href=\"${icons}#icon-plus-circle\"></use>\r\n              </svg>\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"recipe__user-generated\">\r\n          <svg>\r\n            <use href=\"${icons}#icon-user\"></use>\r\n          </svg>\r\n        </div>\r\n        <button class=\"btn--round\">\r\n          <svg class=\"\">\r\n            <use href=\"${icons}#icon-bookmark-fill\"></use>\r\n          </svg>\r\n        </button>\r\n      </div>\r\n      <div class=\"recipe__ingredients\">\r\n        <h2 class=\"heading--2\">Recipe ingredients</h2>\r\n        <ul class=\"recipe__ingredient-list\">\r\n        ${recipe.ingredients ? recipe.ingredients.map(ing => {\r\n            return `\r\n          <li class=\"recipe__ingredient\">\r\n            <svg class=\"recipe__icon\">\r\n              <use href=\"${icons}icon-check\"></use>\r\n            </svg>\r\n            <div class=\"recipe__quantity\">${ing.quantity}</div>\r\n            <div class=\"recipe__description\">\r\n              <span class=\"recipe__unit\">${ing.unit}</span>\r\n              ${ing.description}\r\n            </div>\r\n          </li>\r\n          `;\r\n        }).join('') : ''}      \r\n        </ul>\r\n      </div>\r\n      <div class=\"recipe__directions\">\r\n        <h2 class=\"heading--2\">How to cook it</h2>\r\n        <p class=\"recipe__directions-text\">\r\n          This recipe was carefully designed and tested by\r\n          <span class=\"recipe__publisher\">${recipe.publisher}</span>. Please check out\r\n          directions at their website.\r\n        </p>\r\n        <a class=\"btn--small recipe__btn\" href=\"${recipe.source_url}\" target=\"_blank\">\r\n          <span>Directions</span>\r\n          <svg class=\"search__icon\">\r\n            <use href=\"${icons}#icon-arrow-right\"></use>\r\n          </svg>\r\n        </a>\r\n      </div>`;\r\n */  // Imprimir en la consola el contenido\n /*  recipeContainer.innerHTML = '';\r\n      recipeContainer.insertAdjacentHTML('afterbegin', markup); */  /* } else {\r\n      throw new Error('La estructura de los datos no es la esperada.');\r\n    } \r\n  } catch (error){\r\n    alert('Error: ' + error.message);\r\n  }\r\n}\r\n\r\n// evento 'hashchange' \r\n//window.addEventListener('hashchange', showRecipe);\r\n\r\n// evento 'load' \r\n//window.addEventListener('load', showRecipe);\r\nconst events = ['hashchange', 'load'];\r\n\r\n// metodoForeach para obtener los eventos \r\nevents.forEach(ev => {\r\n  window.addEventListener(ev, () => controlRecipes(ev));\r\n}); */  ////////////////////////////////////////////////////////////AVANCE 1/////////////////////////////////////////////////////////////////////\n // Importacion de Iconos \n /* import icons from '../img/icons.svg';\r\nconst recipeContainer = document.querySelector('.recipe');\r\n\r\nconst timeout = function (s) {\r\n  return new Promise(function (_, reject) {\r\n    setTimeout(function () {\r\n      reject(new Error(`Request took too long! Timeout after ${s} second`));\r\n    }, s * 1000);\r\n  });\r\n}; */  // Se toma la parte HTML del spinner que se encuentra comentado en el archivo index\n // para crear la funcion render Spinner\n /* function renderSpinner(parentEl) {\r\n  const markup = `\r\n  <div class=\"spinner\">\r\n    <svg>\r\n      <use href=\"${icons}#icon-loader\"></use>\r\n    </svg>\r\n  </div>`;\r\n\r\n  parentEl.innerHTML = '';\r\n  parentEl.insertAdjacentHTML('afterbegin', markup);\r\n} */  // Funcion asincronica ShowRecipe\n /* async function showRecipe(){\r\n  try{\r\n    // Antes de subir toda la informacion, muestra la imagen de cargando\r\n    renderSpinner(recipeContainer);\r\n    // Const para obtener la API mediante el await\r\n    // Si se obtiene mediante esta direccion realiza lo siguiente:\r\n    // ¿Cuál es el contenido de resp?\r\n    // Obtiene un status de para identificar si la pagina existe o detecta informacion de la misma\r\n    // ¿Cuál es el contenido de data?\r\n    // Obtiene la informacion de una receta con sus ingredientes a traves de un Array\r\n    const resp = await fetch('https://forkify-api.herokuapp.com/api/v2/recipes/5ed6604591c37cdc054bc886');\r\n\r\n    // ¿Qué sucede si le pasas esta URL a la función?\r\n    // Obtiene un mensaje de error al obtener la receta, indicando que la pagina no existe o hay un error en el URL Error 400\r\n    // const resp = await fetch('https://forkify-api.herokuapp.com/api/v2/recipes/5ed6604591c37cdc054bc886zzz');\r\n\r\n    // Mensaje de Error en caso de que la pagina sea igual a falso\r\n    if (!resp.ok) {\r\n      throw new Error('Error al obtener la receta');\r\n    }\r\n\r\n    const data = await resp.json();\r\n    const recipeData = data.data.recipe;\r\n\r\n    // Valida que obtenga informacion para crear la constante para los datos de la receta\r\n    if (data.data) {\r\n      const { id, title, publisher, source_url, image_url, servings, cooking_time, ingredients } = recipeData;\r\n\r\n      const recipe = {\r\n        id,\r\n        title,\r\n        publisher,\r\n        sourceUrl: source_url,  \r\n        image: image_url,\r\n        servings,\r\n        cookTime: cooking_time,\r\n        ingredients,\r\n      };\r\n\r\n      // Parte HTML, donde muestra los datos de la receta y a su vez hace los cambios directos en el HTML\r\n      const markup = ` <figure class=\"recipe__fig\">\r\n        <img src=\"${recipe.image}\" alt=\"Tomato\" class=\"recipe__img\" />\r\n        <h1 class=\"recipe__title\">\r\n          <span>${recipe.title}</span>\r\n        </h1>\r\n      </figure>\r\n\r\n      <div class=\"recipe__details\">\r\n        <div class=\"recipe__info\">\r\n          <svg class=\"recipe__info-icon\">\r\n            <use href=\"../img/icons.svg#icon-clock\"></use>\r\n          </svg>\r\n          <span class=\"recipe__info-data recipe__info-data--minutes\">${recipe.cookTime}</span>\r\n          <span class=\"recipe__info-text\">minutes</span>\r\n        </div>\r\n        <div class=\"recipe__info\">\r\n          <svg class=\"recipe__info-icon\">\r\n            <use href=\"${icons}#icon-users\"></use>\r\n          </svg>\r\n          <span class=\"recipe__info-data recipe__info-data--people\">${recipe.servings}</span>\r\n          <span class=\"recipe__info-text\">servings</span>\r\n\r\n          <div class=\"recipe__info-buttons\">\r\n            <button class=\"btn--tiny btn--increase-servings\">\r\n              <svg>\r\n              <use href=\"${icons}#icon-minus-circle\"></use>\r\n              </svg>\r\n            </button>\r\n            <button class=\"btn--tiny btn--increase-servings\">\r\n              <svg>\r\n              <use href=\"${icons}#icon-plus-circle\"></use>\r\n              </svg>\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"recipe__user-generated\">\r\n          <svg>\r\n            <use href=\"${icons}#icon-user\"></use>\r\n          </svg>\r\n        </div>\r\n        <button class=\"btn--round\">\r\n          <svg class=\"\">\r\n            <use href=\"${icons}#icon-bookmark-fill\"></use>\r\n          </svg>\r\n        </button>\r\n      </div>\r\n\r\n      <div class=\"recipe__ingredients\">\r\n        <h2 class=\"heading--2\">Recipe ingredients</h2>\r\n        <ul class=\"recipe__ingredient-list\">\r\n        ${recipe.ingredients.map(ing => {\r\n            return `\r\n          <li class=\"recipe__ingredient\">\r\n            <svg class=\"recipe__icon\">\r\n              <use href=\"${icons}icon-check\"></use>\r\n            </svg>\r\n            <div class=\"recipe__quantity\">${ing.quantity}</div>\r\n            <div class=\"recipe__description\">\r\n              <span class=\"recipe__unit\">${ing.unit}</span>\r\n              ${ing.description}\r\n            </div>\r\n          </li>\r\n          `;\r\n          }).join('')}        \r\n        </ul>\r\n      </div>\r\n      <div class=\"recipe__directions\">\r\n        <h2 class=\"heading--2\">How to cook it</h2>\r\n        <p class=\"recipe__directions-text\">\r\n          This recipe was carefully designed and tested by\r\n          <span class=\"recipe__publisher\">${recipe.publisher}</span>. Please check out\r\n          directions at their website.\r\n        </p>\r\n        <a class=\"btn--small recipe__btn\" href=\"${recipe.sourceUrl}\" target=\"_blank\">\r\n          <span>Directions</span>\r\n          <svg class=\"search__icon\">\r\n            <use href=\"${icons}#icon-arrow-right\"></use>\r\n          </svg>\r\n        </a>\r\n      </div>`;\r\n\r\n      // Imprimir en la consola el contenido\r\n      recipeContainer.innerHTML = '';\r\n      recipeContainer.insertAdjacentHTML('afterbegin', markup);\r\n      // console.log('Contenido de la Receta: ', recipe);\r\n      // console.log('Respuesta:', resp);\r\n      // console.log('Datos:', data);\r\n      // console.log('Recipe: ', recipe);\r\n    } else {\r\n      throw new Error('La estructura de los datos no es la esperada.');\r\n    }\r\n  } catch (error){\r\n    alert('Error: ' + error.message);\r\n  }\r\n}\r\n\r\nshowRecipe(); */ \n\n\n//# sourceMappingURL=index.6035c020.js.map\n","\"use strict\";\n\nvar mapping = new Map();\nfunction register(baseUrl, manifest) {\n  for (var i = 0; i < manifest.length - 1; i += 2) {\n    mapping.set(manifest[i], {\n      baseUrl: baseUrl,\n      path: manifest[i + 1]\n    });\n  }\n}\nfunction resolve(id) {\n  var resolved = mapping.get(id);\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n  return new URL(resolved.path, resolved.baseUrl).toString();\n}\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(new __parcel__URL__(\"\").toString(),JSON.parse(\"[\\\"f9fpV\\\",\\\"index.6035c020.js\\\",\\\"hfd23\\\",\\\"icons.c14567a0.svg\\\"]\"));","/* Importaciones */\r\nimport recipeView from './views/RecipeView';\r\nimport searchView from './views/searchView';\r\nimport resultsView from './views/ResultsView';\r\nimport paginationView from './views/paginationView';\r\nimport * as model from './model';\r\n\r\nasync function controlRecipes(){\r\n  try{\r\n     // Declaracion de variable id\r\n    const id = window.location.hash.slice(1);\r\n\r\n    // Crear una condicional, para validar si existe el ID\r\n    if (!id) return;\r\n\r\n    // Funcion para mostrar una imagen de que esta cargando la informacion\r\n    recipeView.renderSpinner();\r\n    await model.loadRecipe(id);\r\n\r\n    /* Se hace el cambio por la vista */\r\n    recipeView.render(model.state.recipe);\r\n\r\n  } catch (error){\r\n    recipeView.renderError(error.message);\r\n  }\r\n}\r\n\r\nasync function controlSearchResults(){\r\n  try{\r\n    // Se realiza la busqueda de lo ingresado en el portal, para obtener los resultados del mismo\r\n    const searchQuery = searchView.getQuery();\r\n\r\n    if (!searchQuery) return;\r\n    \r\n    resultsView.renderSpinner();\r\n    await model.loadSearchResults(searchQuery);\r\n\r\n\r\n    // Invoca el método render dentro del model\r\n    resultsView.render(model.getSearchResultsPage());\r\n    paginationView.render(model.state.search);\r\n  } catch (err){\r\n    console.log(err)\r\n  }\r\n}\r\n\r\n\r\n// Cree una nueva funcion aincronica, para obtener la pagina de manera actualizada y que la cambie en el portal\r\nasync function controlPagination(goToPage) {\r\n  try {\r\n\r\n    model.getSearchResultsPage(goToPage);\r\n    resultsView.render(model.getSearchResultsPage());\r\n    paginationView.render(model.state.search);\r\n\r\n  } catch (err) {\r\n    console.error(err);\r\n  }\r\n}\r\n\r\n\r\nfunction init() {\r\n  recipeView.addHandlerRender(controlRecipes);\r\n  searchView.addHandlerSearch(controlSearchResults);\r\n  paginationView.addHandlerClick(controlPagination);\r\n}\r\n\r\n// Se pasan las instancias de la funcion Init \r\ninit();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* AVANCE 2 */\r\n\r\n\r\n/* /* Importaciones \r\nimport recipeView from './views/RecipeView';\r\nimport * as model from './model';\r\n\r\n// const recipeContainer = document.querySelector('.recipe');\r\n\r\n/* Se elimina el timeout para pasarlo a helpers */\r\n/* const timeout = function (s) {\r\n  return new Promise(function (_, reject) {\r\n    setTimeout(function () {\r\n      reject(new Error(`Request took too long! Timeout after ${s} second`));\r\n    }, s * 1000);\r\n  });\r\n}; */\r\n\r\n// Se elimina el renderspinner del controller.js y se pasa al recipeview\r\n/* function renderSpinner(parentEl) {\r\n  const markup = `\r\n  <div class=\"spinner\">\r\n    <svg>\r\n      <use href=\"${icons}#icon-loader\"></use>\r\n    </svg>\r\n  </div>`;\r\n  parentEl.innerHTML = '';\r\n  parentEl.insertAdjacentHTML('afterbegin', markup);\r\n} \r\n\r\nasync function controlRecipes(){\r\n  try{\r\n     // Declara una variable id y asígnale el método window.location.hash\r\n    const id = window.location.hash.slice(1);\r\n\r\n    // Imprime en la consola el resultado\r\n    // console.log('ID de la receta:', id);\r\n\r\n    // Antes de obtener, muestra la imagen de cargando\r\n    recipeView.renderSpinner();\r\n\r\n    /* // Obtiene la informacion de una receta con sus ingredientes a traves de un Array\r\n    // const resp = await fetch('https://forkify-api.herokuapp.com/api/v2/recipes/5ed6604591c37cdc054bc886');\r\n    // Modificacion de la URL de manera que obtenga el ID que se toma del index.html\r\n    const resp = await fetch(`https://forkify-api.herokuapp.com/api/v2/recipes/${id}`);\r\n\r\n    // Mensaje de Error en caso de que la pagina sea igual a falso\r\n    if (!resp.ok) {\r\n      throw new Error('Error al obtener la receta');\r\n    } \r\n\r\n    await model.loadRecipe(id);\r\n    //const { recipe } = model.state;\r\n\r\n    /* Se hace el cambio por la vista \r\n    recipeView.render(model.state.recipe);\r\n\r\n    /* const data = await resp.json();\r\n    const recipeData = data.data.recipe;\r\n\r\n    \r\n    // Valida que obtenga informacion para crear la constante para los datos de la receta\r\n    if (data.data) {\r\n      const { id, title, publisher, source_url, image_url, servings, cooking_time, ingredients } = recipeData;\r\n\r\n      const recipe = {\r\n        id,\r\n        title,\r\n        publisher,\r\n        sourceUrl: source_url,  \r\n        image: image_url,\r\n        servings,\r\n        cookTime: cooking_time,\r\n        ingredients,\r\n      }; */\r\n\r\n      // Parte HTML, donde muestra los datos de la receta y a su vez hace los cambios directos en el HTML\r\n      /* Debido al siguiente error: Cannot read properties of undefined (reading 'map') se genera una validacion del MAP */\r\n      /* Se desactiva la parte HTML, ya que se encuentra en el RecipeView */\r\n      /* const markup = ` <figure class=\"recipe__fig\">\r\n        <img src=\"${recipe.image_url}\" alt=\"Tomato\" class=\"recipe__img\" />\r\n        <h1 class=\"recipe__title\">\r\n          <span>${recipe.title}</span>\r\n        </h1>\r\n      </figure>\r\n\r\n      <div class=\"recipe__details\">\r\n        <div class=\"recipe__info\">\r\n          <svg class=\"recipe__info-icon\">\r\n            <use href=\"../img/icons.svg#icon-clock\"></use>\r\n          </svg>\r\n          <span class=\"recipe__info-data recipe__info-data--minutes\">${recipe.cooking_time}</span>\r\n          <span class=\"recipe__info-text\">minutes</span>\r\n        </div>\r\n        <div class=\"recipe__info\">\r\n          <svg class=\"recipe__info-icon\">\r\n            <use href=\"${icons}#icon-users\"></use>\r\n          </svg>\r\n          <span class=\"recipe__info-data recipe__info-data--people\">${recipe.servings}</span>\r\n          <span class=\"recipe__info-text\">servings</span>\r\n\r\n          <div class=\"recipe__info-buttons\">\r\n            <button class=\"btn--tiny btn--increase-servings\">\r\n              <svg>\r\n              <use href=\"${icons}#icon-minus-circle\"></use>\r\n              </svg>\r\n            </button>\r\n            <button class=\"btn--tiny btn--increase-servings\">\r\n              <svg>\r\n              <use href=\"${icons}#icon-plus-circle\"></use>\r\n              </svg>\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"recipe__user-generated\">\r\n          <svg>\r\n            <use href=\"${icons}#icon-user\"></use>\r\n          </svg>\r\n        </div>\r\n        <button class=\"btn--round\">\r\n          <svg class=\"\">\r\n            <use href=\"${icons}#icon-bookmark-fill\"></use>\r\n          </svg>\r\n        </button>\r\n      </div>\r\n      <div class=\"recipe__ingredients\">\r\n        <h2 class=\"heading--2\">Recipe ingredients</h2>\r\n        <ul class=\"recipe__ingredient-list\">\r\n        ${recipe.ingredients ? recipe.ingredients.map(ing => {\r\n            return `\r\n          <li class=\"recipe__ingredient\">\r\n            <svg class=\"recipe__icon\">\r\n              <use href=\"${icons}icon-check\"></use>\r\n            </svg>\r\n            <div class=\"recipe__quantity\">${ing.quantity}</div>\r\n            <div class=\"recipe__description\">\r\n              <span class=\"recipe__unit\">${ing.unit}</span>\r\n              ${ing.description}\r\n            </div>\r\n          </li>\r\n          `;\r\n        }).join('') : ''}      \r\n        </ul>\r\n      </div>\r\n      <div class=\"recipe__directions\">\r\n        <h2 class=\"heading--2\">How to cook it</h2>\r\n        <p class=\"recipe__directions-text\">\r\n          This recipe was carefully designed and tested by\r\n          <span class=\"recipe__publisher\">${recipe.publisher}</span>. Please check out\r\n          directions at their website.\r\n        </p>\r\n        <a class=\"btn--small recipe__btn\" href=\"${recipe.source_url}\" target=\"_blank\">\r\n          <span>Directions</span>\r\n          <svg class=\"search__icon\">\r\n            <use href=\"${icons}#icon-arrow-right\"></use>\r\n          </svg>\r\n        </a>\r\n      </div>`;\r\n */\r\n      // Imprimir en la consola el contenido\r\n     /*  recipeContainer.innerHTML = '';\r\n      recipeContainer.insertAdjacentHTML('afterbegin', markup); */\r\n    /* } else {\r\n      throw new Error('La estructura de los datos no es la esperada.');\r\n    } \r\n  } catch (error){\r\n    alert('Error: ' + error.message);\r\n  }\r\n}\r\n\r\n// evento 'hashchange' \r\n//window.addEventListener('hashchange', showRecipe);\r\n\r\n// evento 'load' \r\n//window.addEventListener('load', showRecipe);\r\nconst events = ['hashchange', 'load'];\r\n\r\n// metodoForeach para obtener los eventos \r\nevents.forEach(ev => {\r\n  window.addEventListener(ev, () => controlRecipes(ev));\r\n}); */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n////////////////////////////////////////////////////////////AVANCE 1/////////////////////////////////////////////////////////////////////\r\n\r\n// Importacion de Iconos \r\n/* import icons from '../img/icons.svg';\r\nconst recipeContainer = document.querySelector('.recipe');\r\n\r\nconst timeout = function (s) {\r\n  return new Promise(function (_, reject) {\r\n    setTimeout(function () {\r\n      reject(new Error(`Request took too long! Timeout after ${s} second`));\r\n    }, s * 1000);\r\n  });\r\n}; */\r\n\r\n// Se toma la parte HTML del spinner que se encuentra comentado en el archivo index\r\n// para crear la funcion render Spinner\r\n/* function renderSpinner(parentEl) {\r\n  const markup = `\r\n  <div class=\"spinner\">\r\n    <svg>\r\n      <use href=\"${icons}#icon-loader\"></use>\r\n    </svg>\r\n  </div>`;\r\n\r\n  parentEl.innerHTML = '';\r\n  parentEl.insertAdjacentHTML('afterbegin', markup);\r\n} */\r\n\r\n// Funcion asincronica ShowRecipe\r\n/* async function showRecipe(){\r\n  try{\r\n    // Antes de subir toda la informacion, muestra la imagen de cargando\r\n    renderSpinner(recipeContainer);\r\n    // Const para obtener la API mediante el await\r\n    // Si se obtiene mediante esta direccion realiza lo siguiente:\r\n    // ¿Cuál es el contenido de resp?\r\n    // Obtiene un status de para identificar si la pagina existe o detecta informacion de la misma\r\n    // ¿Cuál es el contenido de data?\r\n    // Obtiene la informacion de una receta con sus ingredientes a traves de un Array\r\n    const resp = await fetch('https://forkify-api.herokuapp.com/api/v2/recipes/5ed6604591c37cdc054bc886');\r\n\r\n    // ¿Qué sucede si le pasas esta URL a la función?\r\n    // Obtiene un mensaje de error al obtener la receta, indicando que la pagina no existe o hay un error en el URL Error 400\r\n    // const resp = await fetch('https://forkify-api.herokuapp.com/api/v2/recipes/5ed6604591c37cdc054bc886zzz');\r\n\r\n    // Mensaje de Error en caso de que la pagina sea igual a falso\r\n    if (!resp.ok) {\r\n      throw new Error('Error al obtener la receta');\r\n    }\r\n\r\n    const data = await resp.json();\r\n    const recipeData = data.data.recipe;\r\n\r\n    // Valida que obtenga informacion para crear la constante para los datos de la receta\r\n    if (data.data) {\r\n      const { id, title, publisher, source_url, image_url, servings, cooking_time, ingredients } = recipeData;\r\n\r\n      const recipe = {\r\n        id,\r\n        title,\r\n        publisher,\r\n        sourceUrl: source_url,  \r\n        image: image_url,\r\n        servings,\r\n        cookTime: cooking_time,\r\n        ingredients,\r\n      };\r\n\r\n      // Parte HTML, donde muestra los datos de la receta y a su vez hace los cambios directos en el HTML\r\n      const markup = ` <figure class=\"recipe__fig\">\r\n        <img src=\"${recipe.image}\" alt=\"Tomato\" class=\"recipe__img\" />\r\n        <h1 class=\"recipe__title\">\r\n          <span>${recipe.title}</span>\r\n        </h1>\r\n      </figure>\r\n\r\n      <div class=\"recipe__details\">\r\n        <div class=\"recipe__info\">\r\n          <svg class=\"recipe__info-icon\">\r\n            <use href=\"../img/icons.svg#icon-clock\"></use>\r\n          </svg>\r\n          <span class=\"recipe__info-data recipe__info-data--minutes\">${recipe.cookTime}</span>\r\n          <span class=\"recipe__info-text\">minutes</span>\r\n        </div>\r\n        <div class=\"recipe__info\">\r\n          <svg class=\"recipe__info-icon\">\r\n            <use href=\"${icons}#icon-users\"></use>\r\n          </svg>\r\n          <span class=\"recipe__info-data recipe__info-data--people\">${recipe.servings}</span>\r\n          <span class=\"recipe__info-text\">servings</span>\r\n\r\n          <div class=\"recipe__info-buttons\">\r\n            <button class=\"btn--tiny btn--increase-servings\">\r\n              <svg>\r\n              <use href=\"${icons}#icon-minus-circle\"></use>\r\n              </svg>\r\n            </button>\r\n            <button class=\"btn--tiny btn--increase-servings\">\r\n              <svg>\r\n              <use href=\"${icons}#icon-plus-circle\"></use>\r\n              </svg>\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"recipe__user-generated\">\r\n          <svg>\r\n            <use href=\"${icons}#icon-user\"></use>\r\n          </svg>\r\n        </div>\r\n        <button class=\"btn--round\">\r\n          <svg class=\"\">\r\n            <use href=\"${icons}#icon-bookmark-fill\"></use>\r\n          </svg>\r\n        </button>\r\n      </div>\r\n\r\n      <div class=\"recipe__ingredients\">\r\n        <h2 class=\"heading--2\">Recipe ingredients</h2>\r\n        <ul class=\"recipe__ingredient-list\">\r\n        ${recipe.ingredients.map(ing => {\r\n            return `\r\n          <li class=\"recipe__ingredient\">\r\n            <svg class=\"recipe__icon\">\r\n              <use href=\"${icons}icon-check\"></use>\r\n            </svg>\r\n            <div class=\"recipe__quantity\">${ing.quantity}</div>\r\n            <div class=\"recipe__description\">\r\n              <span class=\"recipe__unit\">${ing.unit}</span>\r\n              ${ing.description}\r\n            </div>\r\n          </li>\r\n          `;\r\n          }).join('')}        \r\n        </ul>\r\n      </div>\r\n      <div class=\"recipe__directions\">\r\n        <h2 class=\"heading--2\">How to cook it</h2>\r\n        <p class=\"recipe__directions-text\">\r\n          This recipe was carefully designed and tested by\r\n          <span class=\"recipe__publisher\">${recipe.publisher}</span>. Please check out\r\n          directions at their website.\r\n        </p>\r\n        <a class=\"btn--small recipe__btn\" href=\"${recipe.sourceUrl}\" target=\"_blank\">\r\n          <span>Directions</span>\r\n          <svg class=\"search__icon\">\r\n            <use href=\"${icons}#icon-arrow-right\"></use>\r\n          </svg>\r\n        </a>\r\n      </div>`;\r\n\r\n      // Imprimir en la consola el contenido\r\n      recipeContainer.innerHTML = '';\r\n      recipeContainer.insertAdjacentHTML('afterbegin', markup);\r\n      // console.log('Contenido de la Receta: ', recipe);\r\n      // console.log('Respuesta:', resp);\r\n      // console.log('Datos:', data);\r\n      // console.log('Recipe: ', recipe);\r\n    } else {\r\n      throw new Error('La estructura de los datos no es la esperada.');\r\n    }\r\n  } catch (error){\r\n    alert('Error: ' + error.message);\r\n  }\r\n}\r\n\r\nshowRecipe(); */","import icons from '../../img/icons.svg';\r\nimport View from './View';\r\nimport { Fraction } from 'fractional';\r\n\r\nclass RecipeView extends View{\r\n    _parentElement;\r\n    _data;\r\n    _errorMessage = 'We could not find that recipe. Please try another one!';\r\n    _successMessage = 'Recipe successfully loaded!';\r\n  \r\n    constructor(parentElement) {\r\n      super(parentElement);\r\n      this._parentElement = document.querySelector(parentElement);\r\n    }\r\n  \r\n    render(data) {\r\n      this._data = data;\r\n      const markup = this._generateMarkup();\r\n      this._parentElement.innerHTML = markup;\r\n    }\r\n\r\n    addHandlerRender(handler) {\r\n      ['hashchange', 'load'].forEach(ev => window.addEventListener(ev, event => handler(event)));\r\n    }\r\n  \r\n    /* Se copia el HTML que tenemos en Controller JS, ya que es nuestra parte de la vista */\r\n    /* Debido al siguiente error: Cannot read properties of undefined (reading 'map') se genera una validacion del MAP */\r\n    _generateMarkup() {\r\n      return `<figure class=\"recipe__fig\">\r\n        <img src=\"${this._data.image_url}\" alt=\"Tomato\" class=\"recipe__img\" />\r\n        <h1 class=\"recipe__title\">\r\n          <span>${this._data.title}</span>\r\n        </h1>\r\n      </figure>\r\n\r\n      <div class=\"recipe__details\">\r\n        <div class=\"recipe__info\">\r\n          <svg class=\"recipe__info-icon\">\r\n            <use href=\"../img/icons.svg#icon-clock\"></use>\r\n          </svg>\r\n          <span class=\"recipe__info-data recipe__info-data--minutes\">${this._data.cooking_time}</span>\r\n          <span class=\"recipe__info-text\">minutes</span>\r\n        </div>\r\n        <div class=\"recipe__info\">\r\n          <svg class=\"recipe__info-icon\">\r\n            <use href=\"${icons}#icon-users\"></use>\r\n          </svg>\r\n          <span class=\"recipe__info-data recipe__info-data--people\">${this._data.servings}</span>\r\n          <span class=\"recipe__info-text\">servings</span>\r\n\r\n          <div class=\"recipe__info-buttons\">\r\n            <button class=\"btn--tiny btn--increase-servings\">\r\n              <svg>\r\n              <use href=\"${icons}#icon-minus-circle\"></use>\r\n              </svg>\r\n            </button>\r\n            <button class=\"btn--tiny btn--increase-servings\">\r\n              <svg>\r\n              <use href=\"${icons}#icon-plus-circle\"></use>\r\n              </svg>\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"recipe__user-generated\">\r\n          <svg>\r\n            <use href=\"${icons}#icon-user\"></use>\r\n          </svg>\r\n        </div>\r\n        <button class=\"btn--round\">\r\n          <svg class=\"\">\r\n            <use href=\"${icons}#icon-bookmark-fill\"></use>\r\n          </svg>\r\n        </button>\r\n      </div>\r\n      <div class=\"recipe__ingredients\">\r\n        <h2 class=\"heading--2\">Recipe ingredients</h2>\r\n        <ul class=\"recipe__ingredient-list\">\r\n        ${this._data.ingredients ? this._data.ingredients.map(ing => {\r\n          /* Se agrega la funcion para obtener la fraccion de la cantidad */\r\n            const quantity = ing.quantity ? new Fraction(ing.quantity).toString() : '';\r\n            return `\r\n          <li class=\"recipe__ingredient\">\r\n            <svg class=\"recipe__icon\">\r\n              <use href=\"${icons}icon-check\"></use>\r\n            </svg>\r\n            <div class=\"recipe__quantity\">${quantity}</div>\r\n            <div class=\"recipe__description\">\r\n              <span class=\"recipe__unit\">${ing.unit}</span>\r\n              ${ing.description}\r\n            </div>\r\n          </li>\r\n          `;\r\n        }).join('') : ''}      \r\n        </ul>\r\n      </div>\r\n      <div class=\"recipe__directions\">\r\n        <h2 class=\"heading--2\">How to cook it</h2>\r\n        <p class=\"recipe__directions-text\">\r\n          This recipe was carefully designed and tested by\r\n          <span class=\"recipe__publisher\">${this._data.publisher}</span>. Please check out\r\n          directions at their website.\r\n        </p>\r\n        <a class=\"btn--small recipe__btn\" href=\"${this._data.source_url}\" target=\"_blank\">\r\n          <span>Directions</span>\r\n          <svg class=\"search__icon\">\r\n            <use href=\"${icons}#icon-arrow-right\"></use>\r\n          </svg>\r\n        </a>\r\n      </div>`;\r\n    }\r\n  \r\n    _clear() {\r\n      this._parentElement.innerHTML = '';\r\n    }\r\n\r\n    renderSpinner() {\r\n      const markup = `\r\n        <div class=\"spinner\">\r\n          <svg>\r\n            <use href=\"${icons}#icon-loader\"></use>\r\n          </svg>\r\n        </div>\r\n      `;\r\n      this._parentElement.innerHTML = '';\r\n      this._parentElement.insertAdjacentHTML('afterbegin', markup);\r\n    }\r\n\r\n    renderError(message = this._errorMessage) {\r\n      this._clear();\r\n      \r\n      const markup = `\r\n        <div class=\"error\">\r\n          <div>\r\n            <svg>\r\n              <use href=\"${icons}#icon-alert-triangle\"></use>\r\n            </svg>\r\n          </div>\r\n          <p>${message}</p>\r\n        </div>\r\n      `;\r\n      \r\n      this._parentElement.insertAdjacentHTML('afterbegin', markup);\r\n    }\r\n\r\n    renderMessage(message = this._message) {\r\n      this._clear();\r\n  \r\n      const markup = `\r\n        <div class=\"message\">\r\n          <div>\r\n            <svg>\r\n              <use href=\"${icons}#icon-smile\"></use>\r\n            </svg>\r\n          </div>\r\n          <p>${message}</p>\r\n        </div>\r\n      `;\r\n  \r\n      this._parentElement.insertAdjacentHTML('afterbegin', markup);\r\n    }\r\n  }\r\n  \r\n/* Exportacion de la clase RecipeView */\r\nexport default new RecipeView('.recipe');","module.exports = new __parcel__URL__(\"icons.c14567a0.svg\").toString();","import icons from '../../img/icons.svg';\r\n\r\nclass View{\r\n    _data;\r\n    _parentElement;\r\n\r\n    constructor(parentElement) {\r\n        this._parentElement = document.querySelector(parentElement);\r\n    }\r\n    \r\n    render(data) {\r\n\r\n        this._data = data;\r\n        \r\n        if (!data || (Array.isArray(data) && data.length === 0)) {\r\n            return this.renderError('No data available.');\r\n        }\r\n        \r\n        \r\n        const markup = this._generateMarkup();\r\n        this._parentElement.innerHTML = markup;\r\n    }\r\n\r\n    _clear() {\r\n        this._parentElement.innerHTML = '';\r\n    }\r\n\r\n    renderSpinner() {\r\n        const markup = `\r\n            <div class=\"spinner\">\r\n                <svg>\r\n                    <use href=\"${icons}#icon-loader\"></use>\r\n                </svg>\r\n            </div>`;\r\n        this._parentElement.innerHTML = '';\r\n        this._parentElement.insertAdjacentHTML('afterbegin', markup);\r\n    }\r\n\r\n    renderError(message = this._errorMessage) {\r\n        this._clear();\r\n        const markup = `\r\n            <div class=\"error\">\r\n                <div>\r\n                    <svg>\r\n                        <use href=\"${icons}#icon-alert-triangle\"></use>\r\n                    </svg>\r\n                </div>\r\n                <p>${message}</p>\r\n            </div>`;    \r\n        this._parentElement.insertAdjacentHTML('afterbegin', markup);\r\n    }\r\n\r\n    renderMessage(message = this._message) {\r\n        this._clear();\r\n        const markup = `\r\n            <div class=\"message\">\r\n                <div>\r\n                    <svg>\r\n                        <use href=\"${icons}#icon-smile\"></use>\r\n                    </svg>\r\n                </div>\r\n                <p>${message}</p>\r\n            </div>`;\r\n    \r\n        this._parentElement.insertAdjacentHTML('afterbegin', markup);\r\n    }\r\n}\r\n\r\nexport default View;\r\n","/*\r\nfraction.js\r\nA Javascript fraction library.\r\n\r\nCopyright (c) 2009  Erik Garrison <erik@hypervolu.me>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n\r\n*/\r\n\r\n\r\n/* Fractions */\r\n/* \r\n *\r\n * Fraction objects are comprised of a numerator and a denomenator.  These\r\n * values can be accessed at fraction.numerator and fraction.denomenator.\r\n *\r\n * Fractions are always returned and stored in lowest-form normalized format.\r\n * This is accomplished via Fraction.normalize.\r\n *\r\n * The following mathematical operations on fractions are supported:\r\n *\r\n * Fraction.equals\r\n * Fraction.add\r\n * Fraction.subtract\r\n * Fraction.multiply\r\n * Fraction.divide\r\n *\r\n * These operations accept both numbers and fraction objects.  (Best results\r\n * are guaranteed when the input is a fraction object.)  They all return a new\r\n * Fraction object.\r\n *\r\n * Usage:\r\n *\r\n * TODO\r\n *\r\n */\r\n\r\n/*\r\n * The Fraction constructor takes one of:\r\n *   an explicit numerator (integer) and denominator (integer),\r\n *   a string representation of the fraction (string),\r\n *   or a floating-point number (float)\r\n *\r\n * These initialization methods are provided for convenience.  Because of\r\n * rounding issues the best results will be given when the fraction is\r\n * constructed from an explicit integer numerator and denomenator, and not a\r\n * decimal number.\r\n *\r\n *\r\n * e.g. new Fraction(1, 2) --> 1/2\r\n *      new Fraction('1/2') --> 1/2\r\n *      new Fraction('2 3/4') --> 11/4  (prints as 2 3/4)\r\n *\r\n */\r\nFraction = function(numerator, denominator)\r\n{\r\n    /* double argument invocation */\r\n    if (typeof numerator !== 'undefined' && denominator) {\r\n        if (typeof(numerator) === 'number' && typeof(denominator) === 'number') {\r\n            this.numerator = numerator;\r\n            this.denominator = denominator;\r\n        } else if (typeof(numerator) === 'string' && typeof(denominator) === 'string') {\r\n            // what are they?\r\n            // hmm....\r\n            // assume they are ints?\r\n            this.numerator = parseInt(numerator);\r\n            this.denominator = parseInt(denominator);\r\n        }\r\n    /* single-argument invocation */\r\n    } else if (typeof denominator === 'undefined') {\r\n        num = numerator; // swap variable names for legibility\r\n        if (typeof(num) === 'number') {  // just a straight number init\r\n            this.numerator = num;\r\n            this.denominator = 1;\r\n        } else if (typeof(num) === 'string') {\r\n            var a, b;  // hold the first and second part of the fraction, e.g. a = '1' and b = '2/3' in 1 2/3\r\n                       // or a = '2/3' and b = undefined if we are just passed a single-part number\r\n            var arr = num.split(' ')\r\n            if (arr[0]) a = arr[0]\r\n            if (arr[1]) b = arr[1]\r\n            /* compound fraction e.g. 'A B/C' */\r\n            //  if a is an integer ...\r\n            if (a % 1 === 0 && b && b.match('/')) {\r\n                return (new Fraction(a)).add(new Fraction(b));\r\n            } else if (a && !b) {\r\n                /* simple fraction e.g. 'A/B' */\r\n                if (typeof(a) === 'string' && a.match('/')) {\r\n                    // it's not a whole number... it's actually a fraction without a whole part written\r\n                    var f = a.split('/');\r\n                    this.numerator = f[0]; this.denominator = f[1];\r\n                /* string floating point */\r\n                } else if (typeof(a) === 'string' && a.match('\\.')) {\r\n                    return new Fraction(parseFloat(a));\r\n                /* whole number e.g. 'A' */\r\n                } else { // just passed a whole number as a string\r\n                    this.numerator = parseInt(a);\r\n                    this.denominator = 1;\r\n                }\r\n            } else {\r\n                return undefined; // could not parse\r\n            }\r\n        }\r\n    }\r\n    this.normalize();\r\n}\r\n\r\n\r\nFraction.prototype.clone = function()\r\n{\r\n    return new Fraction(this.numerator, this.denominator);\r\n}\r\n\r\n\r\n/* pretty-printer, converts fractions into whole numbers and fractions */\r\nFraction.prototype.toString = function()\r\n{\r\n    if (this.denominator==='NaN') return 'NaN'\r\n    var wholepart = (this.numerator/this.denominator>0) ?\r\n      Math.floor(this.numerator / this.denominator) :\r\n      Math.ceil(this.numerator / this.denominator)\r\n    var numerator = this.numerator % this.denominator \r\n    var denominator = this.denominator;\r\n    var result = []; \r\n    if (wholepart != 0)  \r\n        result.push(wholepart);\r\n    if (numerator != 0)  \r\n        result.push(((wholepart===0) ? numerator : Math.abs(numerator)) + '/' + denominator);\r\n    return result.length > 0 ? result.join(' ') : 0;\r\n}\r\n\r\n\r\n/* destructively rescale the fraction by some integral factor */\r\nFraction.prototype.rescale = function(factor)\r\n{\r\n    this.numerator *= factor;\r\n    this.denominator *= factor;\r\n    return this;\r\n}\r\n\r\n\r\nFraction.prototype.add = function(b)\r\n{\r\n    var a = this.clone();\r\n    if (b instanceof Fraction) {\r\n        b = b.clone();\r\n    } else {\r\n        b = new Fraction(b);\r\n    }\r\n    td = a.denominator;\r\n    a.rescale(b.denominator);\r\n    b.rescale(td);\r\n\r\n    a.numerator += b.numerator;\r\n\r\n    return a.normalize();\r\n}\r\n\r\n\r\nFraction.prototype.subtract = function(b)\r\n{\r\n    var a = this.clone();\r\n    if (b instanceof Fraction) {\r\n        b = b.clone();  // we scale our argument destructively, so clone\r\n    } else {\r\n        b = new Fraction(b);\r\n    }\r\n    td = a.denominator;\r\n    a.rescale(b.denominator);\r\n    b.rescale(td);\r\n\r\n    a.numerator -= b.numerator;\r\n\r\n    return a.normalize();\r\n}\r\n\r\n\r\nFraction.prototype.multiply = function(b)\r\n{\r\n    var a = this.clone();\r\n    if (b instanceof Fraction)\r\n    {\r\n        a.numerator *= b.numerator;\r\n        a.denominator *= b.denominator;\r\n    } else if (typeof b === 'number') {\r\n        a.numerator *= b;\r\n    } else {\r\n        return a.multiply(new Fraction(b));\r\n    }\r\n    return a.normalize();\r\n}\r\n\r\nFraction.prototype.divide = function(b)\r\n{\r\n    var a = this.clone();\r\n    if (b instanceof Fraction)\r\n    {\r\n        a.numerator *= b.denominator;\r\n        a.denominator *= b.numerator;\r\n    } else if (typeof b === 'number') {\r\n        a.denominator *= b;\r\n    } else {\r\n        return a.divide(new Fraction(b));\r\n    }\r\n    return a.normalize();\r\n}\r\n\r\nFraction.prototype.equals = function(b)\r\n{\r\n    if (!(b instanceof Fraction)) {\r\n        b = new Fraction(b);\r\n    }\r\n    // fractions that are equal should have equal normalized forms\r\n    var a = this.clone().normalize();\r\n    var b = b.clone().normalize();\r\n    return (a.numerator === b.numerator && a.denominator === b.denominator);\r\n}\r\n\r\n\r\n/* Utility functions */\r\n\r\n/* Destructively normalize the fraction to its smallest representation. \r\n * e.g. 4/16 -> 1/4, 14/28 -> 1/2, etc.\r\n * This is called after all math ops.\r\n */\r\nFraction.prototype.normalize = (function()\r\n{\r\n\r\n    var isFloat = function(n)\r\n    {\r\n        return (typeof(n) === 'number' && \r\n                ((n > 0 && n % 1 > 0 && n % 1 < 1) || \r\n                 (n < 0 && n % -1 < 0 && n % -1 > -1))\r\n               );\r\n    }\r\n\r\n    var roundToPlaces = function(n, places) \r\n    {\r\n        if (!places) {\r\n            return Math.round(n);\r\n        } else {\r\n            var scalar = Math.pow(10, places);\r\n            return Math.round(n*scalar)/scalar;\r\n        }\r\n    }\r\n        \r\n    return (function() {\r\n\r\n        // XXX hackish.  Is there a better way to address this issue?\r\n        //\r\n        /* first check if we have decimals, and if we do eliminate them\r\n         * multiply by the 10 ^ number of decimal places in the number\r\n         * round the number to nine decimal places\r\n         * to avoid js floating point funnies\r\n         */\r\n        if (isFloat(this.denominator)) {\r\n            var rounded = roundToPlaces(this.denominator, 9);\r\n            var scaleup = Math.pow(10, rounded.toString().split('.')[1].length);\r\n            this.denominator = Math.round(this.denominator * scaleup); // this !!! should be a whole number\r\n            //this.numerator *= scaleup;\r\n            this.numerator *= scaleup;\r\n        } \r\n        if (isFloat(this.numerator)) {\r\n            var rounded = roundToPlaces(this.numerator, 9);\r\n            var scaleup = Math.pow(10, rounded.toString().split('.')[1].length);\r\n            this.numerator = Math.round(this.numerator * scaleup); // this !!! should be a whole number\r\n            //this.numerator *= scaleup;\r\n            this.denominator *= scaleup;\r\n        }\r\n        var gcf = Fraction.gcf(this.numerator, this.denominator);\r\n        this.numerator /= gcf;\r\n        this.denominator /= gcf;\r\n        if ((this.numerator < 0 && this.denominator < 0) || (this.numerator > 0 && this.denominator < 0)) {\r\n            this.numerator *= -1;\r\n            this.denominator *= -1;\r\n        }\r\n        return this;\r\n    });\r\n\r\n})();\r\n\r\n\r\n/* Takes two numbers and returns their greatest common factor.\r\n */\r\nFraction.gcf = function(a, b)\r\n{\r\n\r\n    var common_factors = [];\r\n    var fa = Fraction.primeFactors(a);\r\n    var fb = Fraction.primeFactors(b);\r\n    // for each factor in fa\r\n    // if it's also in fb\r\n    // put it into the common factors\r\n    fa.forEach(function (factor) \r\n    { \r\n        var i = fb.indexOf(factor);\r\n        if (i >= 0) {\r\n            common_factors.push(factor);\r\n            fb.splice(i,1); // remove from fb\r\n        }\r\n    });\r\n\r\n    if (common_factors.length === 0)\r\n        return 1;\r\n\r\n    var gcf = (function() {\r\n        var r = common_factors[0];\r\n        var i;\r\n        for (i=1;i<common_factors.length;i++)\r\n        {\r\n            r = r * common_factors[i];\r\n        }\r\n        return r;\r\n    })();\r\n\r\n    return gcf;\r\n\r\n};\r\n\r\n\r\n// Adapted from: \r\n// http://www.btinternet.com/~se16/js/factor.htm\r\nFraction.primeFactors = function(n) \r\n{\r\n\r\n    var num = Math.abs(n);\r\n    var factors = [];\r\n    var _factor = 2;  // first potential prime factor\r\n\r\n    while (_factor * _factor <= num)  // should we keep looking for factors?\r\n    {      \r\n      if (num % _factor === 0)  // this is a factor\r\n        { \r\n            factors.push(_factor);  // so keep it\r\n            num = num/_factor;  // and divide our search point by it\r\n        }\r\n        else\r\n        {\r\n            _factor++;  // and increment\r\n        }\r\n    }\r\n\r\n    if (num != 1)                    // If there is anything left at the end...\r\n    {                                // ...this must be the last prime factor\r\n        factors.push(num);           //    so it too should be recorded\r\n    }\r\n\r\n    return factors;                  // Return the prime factors\r\n}\r\n\r\nmodule.exports.Fraction = Fraction\r\n","class SearchView{\r\n    _parentEl;\r\n\r\n    constructor(parentEl){\r\n        this._parentEl = document.querySelector('.search');\r\n\r\n        this._parentEl.addEventListener('click', this._handleClick.bind(this));\r\n    }\r\n\r\n    _clearInput(){\r\n        this._parentEl.querySelector('.search__field').value = '';\r\n    }\r\n\r\n    getQuery() {\r\n        const query = this._parentEl.querySelector('.search__field').value;\r\n\r\n        this._clearInput();\r\n        \r\n        return query;\r\n        \r\n    }\r\n\r\n\r\n    _handleClick(event) {\r\n        // console.log('Click en el elemento de búsqueda:', event.target);\r\n    }\r\n\r\n    addHandlerSearch(handler) {\r\n        this._parentEl.addEventListener('submit', function (e) {\r\n            e.preventDefault(); \r\n            handler(); \r\n        });\r\n    }\r\n}\r\n\r\nexport default new SearchView();","import View from './View';\r\nimport icons from '../../img/icons.svg';\r\n\r\nclass ResultsView extends View {\r\n    _parentElement = document.querySelector('.results');\r\n    _errorMessage = 'No recipes found for your query';\r\n    _message = '';\r\n\r\n    \r\n    constructor() {\r\n        super('.results');\r\n    }\r\n\r\n    _generateMarkup() {\r\n        return this._data.map(this._generateMarkupPreview).join('');\r\n    }\r\n\r\n    _generateMarkupPreview(result) {\r\n        return `\r\n        <li class=\"preview\">\r\n            <a class=\"preview__link\" href=\"#${result.id}\">\r\n            <figure class=\"preview__fig\">\r\n                <img src=\"${result.image}\" alt=\"${result.title}\" />\r\n            </figure>\r\n            <div class=\"preview__data\">\r\n                <h4 class=\"preview__title\">${result.title}</h4>\r\n                <p class=\"preview__publisher\">${result.publisher}</p>\r\n                <div class=\"preview__user-generated\">\r\n                <svg>\r\n                    <use href=\"${icons}#icon-user\"></use>\r\n                </svg>\r\n                </div>\r\n            </div>\r\n            </a>\r\n        </li>`;\r\n    }\r\n}\r\n\r\nexport default new ResultsView();\r\n","import View from './View';\r\nimport icons from '../../img/icons.svg';\r\n\r\nclass PaginationView extends View {\r\n    _parentElement = document.querySelector('.pagination');\r\n\r\n    addHandlerClick(handler) {\r\n        this._parentElement.addEventListener('click', function (e) {\r\n            const btn = e.target.closest('.btn--inline');\r\n            if (!btn) return;\r\n\r\n            const goToPage = +btn.dataset.goto;\r\n            handler(goToPage);\r\n        });\r\n    }\r\n\r\n    _generateMarkup() {\r\n        if (!this._parentElement) return '';\r\n    \r\n        const currentPage = this._data.page;\r\n        const numPages = Math.ceil(this._data.results.length / this._data.resultsPerPage);\r\n    \r\n        // Cuando esta en la pagina uno y la consulta tiene mas paginas\r\n        if (currentPage === 1 && numPages > 1) {\r\n        return `\r\n            <button data-goto=\"${currentPage + 1}\" class=\"btn--inline pagination__btn--next\">\r\n            <span>Page ${currentPage + 1}</span>\r\n            <svg class=\"search__icon\">\r\n                <use href=\"${icons}#icon-arrow-right\"></use>\r\n            </svg>\r\n            </button>`;\r\n        }\r\n    \r\n        // Cuando esta en la ultima pagina\r\n        if (currentPage === numPages && numPages > 1) {\r\n        return `\r\n            <button data-goto=\"${currentPage - 1}\" class=\"btn--inline pagination__btn--prev\">\r\n                <svg class=\"search__icon\">\r\n                    <use href=\"${icons}#icon-arrow-left\"></use>\r\n                </svg>\r\n                <span>Page ${currentPage - 1}</span>\r\n            </button>`;\r\n        }\r\n    \r\n        // Paginas intermedias\r\n        if (currentPage < numPages) {\r\n        return `\r\n            <button data-goto=\"${currentPage - 1}\" class=\"btn--inline pagination__btn--prev\">\r\n                <svg class=\"search__icon\">\r\n                    <use href=\"${icons}#icon-arrow-left\"></use>\r\n                </svg>\r\n                <span>Page ${currentPage - 1}</span>\r\n            </button>\r\n            <button data-goto=\"${currentPage + 1}\" class=\"btn--inline pagination__btn--next\">\r\n                <span>Page ${currentPage + 1}</span>\r\n                <svg class=\"search__icon\">\r\n                    <use href=\"${icons}#icon-arrow-right\"></use>\r\n                </svg>\r\n            </button>`;\r\n        }\r\n    \r\n        // No existe mas de una pagina\r\n        return '';   \r\n    }\r\n}\r\n\r\nexport default new PaginationView();\r\n","/* Importacion de la URL */\r\nimport { API_URL, RES_PER_PAGE } from './config';\r\nimport { getJSON } from './helpers';\r\n\r\n\r\nconst state = {\r\n    recipe: {},\r\n    search :{\r\n      query: '', \r\n      results: [],\r\n      page: 1, \r\n      resultsPerPage: RES_PER_PAGE,\r\n    }\r\n};\r\nexport { state };\r\n  \r\n// Función asíncrona loadRecipe para obtener la receta de la API\r\nconst loadRecipe = async (id) => {\r\n    try {\r\n      /* Declaracion del res */\r\n      /* const res = await fetch(`https://forkify-api.herokuapp.com/api/v2/recipes/${id}`);\r\n      const data = await res.json(); */\r\n\r\n      const url = `${API_URL}/${id}`;\r\n      // const data = await res.json();\r\n      const data = await getJSON(url);\r\n  \r\n      // Validar el estado de la url\r\n      /* if (!res.ok) {\r\n        throw new Error('Error al obtener la receta');\r\n      } */\r\n      \r\n      // Destructuracion de la informacion\r\n      const { recipe } = data.data;\r\n      // console.log('Recipe:', recipe);\r\n      state.recipe = recipe;\r\n      // console.log('State:', state);\r\n    } catch (err) {\r\n      // Enviar Error\r\n      // console.log(`${err.message} 💥💥💥💥`);\r\n      throw err;\r\n    }\r\n};\r\n\r\n// Funcion en la cual realiza la busqueda con el query obtenido de config.js\r\nconst loadSearchResults = async (query) => {\r\n  try {\r\n      const url = `${API_URL}/?search=${query}`;\r\n      const data = await getJSON(url);\r\n\r\n      state.search.query = query;\r\n\r\n      state.search.results = data.data.recipes.map((rec) => ({\r\n      // const recipes = data.data.recipes.map((rec) => ({\r\n          id: rec.id,\r\n          title: rec.title,\r\n          publisher: rec.publisher,\r\n          image: rec.image_url,\r\n      }));\r\n\r\n      return state.search.results;\r\n  } catch (err) {\r\n      throw err;\r\n  }\r\n};\r\n\r\nconst getSearchResultsPage = (page = state.search.page) => {\r\n  state.search.page = page;\r\n\r\n  // variables de inicio y fin de la paginas \r\n  const start = (page - 1) * state.search.resultsPerPage;\r\n  const end = page * state.search.resultsPerPage;\r\n\r\n  return state.search.results.slice(start, end);\r\n};\r\n\r\n// Llamar la funcion con Pizza como ejemplo\r\n// loadSearchResults('pizza')\r\n// .then((results) => console.log('Search Results:', results))\r\n// .catch((error) => console.error('Error:', error));\r\n  \r\nexport {loadRecipe, loadSearchResults, getSearchResultsPage };","/* Se exporta la URL de las recetas y del timeout */\r\nexport const API_URL = 'https://forkify-api.herokuapp.com/api/v2/recipes/';\r\nexport const TIMEOUT_SEC = 5;\r\nexport const RES_PER_PAGE = 10;","import { TIMEOUT_SEC } from './config';\r\n\r\nconst timeout = function (s) {\r\n  return new Promise(function (_, reject) {\r\n    setTimeout(function () {\r\n      reject(new Error(`Request took too long! Timeout after ${s} second`));\r\n    }, s * 1000);\r\n  });\r\n};\r\n\r\nconst getJSON = async (url) => {\r\n  try {\r\n    // const res = await fetch(url);\r\n    \r\n    const fetchPro = fetch(url);\r\n    const res = await Promise.race([fetchPro, timeout(TIMEOUT_SEC)]);\r\n    \r\n    const data = await res.json();\r\n\r\n    if (!res.ok) {\r\n      throw new Error('Error al obtener los datos');\r\n    }\r\n\r\n    return data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport { getJSON };\r\n"],"names":["$parcel$interopDefault","a","__esModule","default","isFloat","roundToPlaces","$d6b4c6d58e0c0c19$export$b336c2702c498be5","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","Object","defineProperty","get","$18c11f3350a906ea$export$6503ec6e8aabbaf","set","v","enumerable","configurable","$18c11f3350a906ea$var$mapping","Map","baseUrl","manifest","i","length","path","URL","url","toString","JSON","parse","$910d506bc0581171$exports","$3a07c34e115c11c9$export$2e2bcd8739ae039","_data","_parentElement","constructor","parentElement","document","querySelector","render","data","Array","isArray","renderError","markup","_generateMarkup","innerHTML","_clear","renderSpinner","insertAdjacentHTML","message","_errorMessage","renderMessage","_message","Fraction","numerator","denominator","parseInt","num","b","arr","split","match","add","f","parseFloat","normalize","prototype","clone","wholepart","Math","floor","ceil","result","push","abs","join","rescale","factor","td","subtract","multiply","divide","equals","n","places","round","scalar","pow","rounded","scaleup","gcf","common_factors","fa","primeFactors","fb","forEach","indexOf","splice","r","num1","factors","_factor","$e95330fac959b1b1$export$2e2bcd8739ae039","_successMessage","addHandlerRender","handler","ev","window","addEventListener","event","image_url","title","cooking_time","servings","ingredients","map","ing","quantity","unit","description","publisher","source_url","$813cf99795e9ec97$export$2e2bcd8739ae039","_parentEl","parentEl","_handleClick","bind","_clearInput","value","getQuery","query","addHandlerSearch","e","preventDefault","$46392c2e8d6932d9$var$ResultsView","_generateMarkupPreview","image","$46392c2e8d6932d9$export$2e2bcd8739ae039","$cfa940594ee109f7$var$PaginationView","addHandlerClick","btn","target","closest","dataset","goto","currentPage","page","numPages","results","resultsPerPage","$cfa940594ee109f7$export$2e2bcd8739ae039","$ba30e20475feac5a$export$923ea8233b386e99","$bd02c871d9c5ba8e$export$d047a7c56db64af4","fetchPro","fetch","res","Promise","race","_","reject","setTimeout","s","json","ok","error","$0f1d4402dffacf5b$export$ca000e230c0caa3e","recipe","search","$0f1d4402dffacf5b$export$b96725c7a035d60b","$0f1d4402dffacf5b$export$202b8e5cb363a0c4","recipes","rec","$0f1d4402dffacf5b$export$8d7f79465139ab72","start","end","slice","$f50bd1f2915ed0f2$var$controlRecipes","location","hash","$f50bd1f2915ed0f2$var$controlSearchResults","searchQuery","console","log","$f50bd1f2915ed0f2$var$controlPagination","goToPage"],"version":3,"file":"index.6035c020.js.map"}